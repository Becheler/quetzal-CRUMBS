version: 2.1

executors:
  exectr:
    docker:
      - image: arnaudbecheler/quetzal-eggs:latest

orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2

workflows:
  sample:  # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
    jobs:
      - build-and-test-quetzal-EGGS
      - generate-simulation-database
      - build-and-test-quetzal-CRUMBS

jobs:

  build-and-test-quetzal-EGGS: # we will use EGGS simulations to test database API
    executor: exectr
    steps:
      - checkout
      - run:
          name: Setup quetzal-EGGS repo
          command: |
            git clone --recurse-submodules https://github.com/Becheler/quetzal-EGGS
            cd quetzal-EGGS
            mkdir build
            cd build
            cmake ..
            cmake --build .
      - run:
          name: Setup cmake and build artifacts
          command: |
            mkdir build
            cd build
            cmake ..
            cmake --build .
      - persist_to_workspace:
          root: .
          paths:
            - build

  generate-simulation-database: # generate output database that can be used to test CRUMBS API
    executor: exectr
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Setup quetzal child repo
          command: |
            cd quetzal-EGGS-core/quetzal
            git submodule init
            git submodule update
      - run:
          name: Setup cmake and build artifacts
          command: |
            mkdir build
            cd build
            cmake ..
            cmake --build .
      - persist_to_workspace:
          root: .
          paths:
            - build


  build-and-test:  # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.9 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.8
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: pytest
